"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[513],{3480:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=o(4848),t=o(8453);const s={title:"useAPIErrorHandler",slug:"/hooks/use-api-error-handler",description:"API reference for the useAPIErrorHandler() hook",tags:["hooks","api","error-handling"]},i=void 0,a={id:"docs/core/helper-plugin/hooks/use-api-error-handler",title:"useAPIErrorHandler",description:"API reference for the useAPIErrorHandler() hook",source:"@site/docs/docs/01-core/helper-plugin/hooks/use-api-error-handler.mdx",sourceDirName:"docs/01-core/helper-plugin/hooks",slug:"/hooks/use-api-error-handler",permalink:"/hooks/use-api-error-handler",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/helper-plugin/hooks/use-api-error-handler.mdx",tags:[{label:"hooks",permalink:"/tags/hooks"},{label:"api",permalink:"/tags/api"},{label:"error-handling",permalink:"/tags/error-handling"}],version:"current",frontMatter:{title:"useAPIErrorHandler",slug:"/hooks/use-api-error-handler",description:"API reference for the useAPIErrorHandler() hook",tags:["hooks","api","error-handling"]},sidebar:"docs",previous:{title:"Transactions",permalink:"/docs/core/database/transactions"},next:{title:"useCallbackRef",permalink:"/docs/core/helper-plugin/hooks/use-callback-ref"}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>formatAPIError(error: ResponseError): string</code>",id:"formatapierrorerror-responseerror-string",level:3},{value:"<code>normalizeAPIError(error: ResponseError): Object</code>",id:"normalizeapierrorerror-responseerror-object",level:3}];function d(e){const r={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["The purpose of this hook is to offer a unified way to handle errors thrown by API endpoints, regardless of the type of error (",(0,n.jsx)(r.code,{children:"ValidationError"}),", ",(0,n.jsx)(r.code,{children:"ApplicationErrror"})," ...)\nthat has been thrown."]}),"\n",(0,n.jsxs)(r.p,{children:["It receives an optional error prefixing function (often ",(0,n.jsx)(r.code,{children:"getTrad"}),"), which will be used to make the error message translateable."]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(r.p,{children:["The following example shows a basic way to use the ",(0,n.jsx)(r.code,{children:"useAPIErrorHandler"})," hook:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\n\nimport { useAPIErrorHandler, useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport getTrad from '../utils';\n\nconst Component = () => {\n  const { get } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler(getTrad);\n  const toggleNotification = useNotification();\n\n  const handleDeleteItem = async () => {\n    try {\n      return await get('/admin');\n    } catch (error) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(error),\n      });\n    }\n  };\n\n  return <button onClick={handleDeleteItem}>Delete item</button>;\n};\n"})}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"formatapierrorerror-responseerror-string",children:(0,n.jsx)(r.code,{children:"formatAPIError(error: ResponseError): string"})}),"\n",(0,n.jsxs)(r.p,{children:["This method stringifies the ",(0,n.jsx)(r.code,{children:"ResponseObject"})," into a string. If multiple errors are thrown by the API, which happens e.g.\nin the case of a ",(0,n.jsx)(r.code,{children:"ValidationError"}),", all errors will bo concatenated into a single string."]}),"\n",(0,n.jsx)(r.h3,{id:"normalizeapierrorerror-responseerror-object",children:(0,n.jsx)(r.code,{children:"normalizeAPIError(error: ResponseError): Object"})}),"\n",(0,n.jsxs)(r.p,{children:["This method is exported alongside from the ",(0,n.jsx)(r.code,{children:"@strapi/helper-plugin"}),". It can be used to normalize the format of ",(0,n.jsx)(r.code,{children:"ResponseError"}),"\nin places where the hook can not called (e.g. outside of a React component)."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>a});var n=o(6540);const t={},s=n.createContext(t);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);