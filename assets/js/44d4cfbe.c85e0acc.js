"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7639],{660:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=n(4848),t=n(8453);const r={title:"useAdminRoles",description:"API reference for the useAdminRoles hook",tags:["admin","hooks","roles"]},i=void 0,c={id:"docs/core/admin/features/hooks/use-admin-roles",title:"useAdminRoles",description:"API reference for the useAdminRoles hook",source:"@site/docs/docs/01-core/admin/05-features/hooks/use-admin-roles.mdx",sourceDirName:"docs/01-core/admin/05-features/hooks",slug:"/docs/core/admin/features/hooks/use-admin-roles",permalink:"/docs/core/admin/features/hooks/use-admin-roles",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/admin/05-features/hooks/use-admin-roles.mdx",tags:[{label:"admin",permalink:"/tags/admin"},{label:"hooks",permalink:"/tags/hooks"},{label:"roles",permalink:"/tags/roles"}],version:"current",frontMatter:{title:"useAdminRoles",description:"API reference for the useAdminRoles hook",tags:["admin","hooks","roles"]},sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/core/admin/features/authentication"},next:{title:"unstable_useDocument",permalink:"/docs/core/admin/features/hooks/use-document"}},a={},l=[{value:"Usage",id:"usage",level:2},{value:"Typescript",id:"typescript",level:2},{value:"Fetch all roles",id:"fetch-all-roles",level:3},{value:"Fetch one role",id:"fetch-one-role",level:3}];function d(e){const o={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:["An abstraction around ",(0,s.jsx)(o.code,{children:"react-query"}),"'s ",(0,s.jsx)(o.code,{children:"useQuery"})," hook. It can be used to fetch one ore more admin role."]}),"\n",(0,s.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(o.p,{children:"The hooks can receive two optional parameters:"}),"\n",(0,s.jsxs)(o.ol,{children:["\n",(0,s.jsxs)(o.li,{children:["query params: an object containing the query params to be sent to the API. They are going to be\nstringified by ",(0,s.jsx)(o.code,{children:"qs"}),". All params are equal except ",(0,s.jsx)(o.code,{children:"id"}),", which is used to fetch a single users, if\nit is passed."]}),"\n",(0,s.jsxs)(o.li,{children:["options: an object containing the options to be passed to ",(0,s.jsx)(o.code,{children:"useQuery"}),"."]}),"\n"]}),"\n",(0,s.jsx)(o.p,{children:"It returns an object containing some of the react-query attributes."}),"\n",(0,s.jsx)(o.h2,{id:"typescript",children:"Typescript"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:"import { UseQueryOptions } from 'react-query'\n\ntype Role = object;\n\nuseAdminRoles(queryParams: object, reactQueryOptions: UseQueryOptions): {\n    roles: Role[],\n    isLoading: boolean;\n    error: object;\n    isError: boolean;\n    refetch: () => Promise<void>;\n};\n"})}),"\n",(0,s.jsx)(o.h3,{id:"fetch-all-roles",children:"Fetch all roles"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"import { useAdminRoles } from 'path/to/hooks';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const { roles, isLoading, refetch } = useAdminRoles();\n\n  return /* ... */;\n};\n"})}),"\n",(0,s.jsx)(o.h3,{id:"fetch-one-role",children:"Fetch one role"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"import { Box } from '@strapi/design-system';\n\nimport { useAdminRoles } from 'path/to/hooks';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const {\n    users: [user],\n    isLoading,\n    refetch,\n  } = useAdminRoles({ id: 1 });\n\n  return /* ... */;\n};\n"})})]})}function u(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var s=n(6540);const t={},r=s.createContext(t);function i(e){const o=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);