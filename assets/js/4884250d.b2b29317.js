"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7980],{7261:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=r(4848),s=r(8453);const t={title:"Reordering",description:"Conceptual guide to relations reordering in the Database",tags:["database","relations","reordering"]},o=void 0,l={id:"docs/core/database/relations/reordering",title:"Reordering",description:"Conceptual guide to relations reordering in the Database",source:"@site/docs/docs/01-core/database/01-relations/reordering.md",sourceDirName:"docs/01-core/database/01-relations",slug:"/docs/core/database/relations/reordering",permalink:"/docs/core/database/relations/reordering",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/database/01-relations/reordering.md",tags:[{label:"database",permalink:"/tags/database"},{label:"relations",permalink:"/tags/relations"},{label:"reordering",permalink:"/tags/reordering"}],version:"current",frontMatter:{title:"Reordering",description:"Conceptual guide to relations reordering in the Database",tags:["database","relations","reordering"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/database"},next:{title:"Transactions",permalink:"/docs/core/database/transactions"}},a={},d=[{value:"Code location",id:"code-location",level:2},{value:"How is the order stored in DB?",id:"how-is-the-order-stored-in-db",level:2},{value:"Many to many (Addresses &lt;-&gt; Categories)",id:"many-to-many-addresses---categories",level:3},{value:"One to one (Kitchensinks &lt;-&gt; Tags)",id:"one-to-one-kitchensinks---tags",level:3},{value:"One way relation (Restaurants &lt;-&gt; Categories)",id:"one-way-relation-restaurants---categories",level:3},{value:"How to reorder relations in the DB layer",id:"how-to-reorder-relations-in-the-db-layer",level:2},{value:"How does relations reordering work?",id:"how-does-relations-reordering-work",level:2},{value:"Simple example",id:"simple-example",level:3},{value:"Complex example",id:"complex-example",level:3},{value:"Algorithm steps",id:"algorithm-steps",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Strapi allows you to reorder a relation list."}),"\n",(0,i.jsx)("img",{src:"/img/database/reordering.png",alt:"An example of reordering in the CM"}),"\n",(0,i.jsx)(n.p,{children:"This reordering feature is available in the Content Manager and the API."}),"\n",(0,i.jsx)(n.h2,{id:"code-location",children:"Code location"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"packages/core/database/lib/entity-manager/relations-orderer.js"})}),"\n",(0,i.jsx)(n.h2,{id:"how-is-the-order-stored-in-db",children:"How is the order stored in DB?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We store the order value of the relation in an ",(0,i.jsx)(n.code,{children:"order"})," field."]}),"\n",(0,i.jsxs)(n.li,{children:["For bidirectional relations, we store the order value of the other side in an ",(0,i.jsx)(n.code,{children:"inverse_order"})," field."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We store order values for all type of relations, except for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Polymorphic relations (too complicated to implement)."}),"\n",(0,i.jsx)(n.li,{children:"One to one relations (as there is only one relation per pair)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"many-to-many-addresses---categories",children:"Many to many (Addresses <-> Categories)"}),"\n",(0,i.jsx)("img",{src:"/img/database/m2m-example.png",alt:"many to many relation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"category_order"})," is the order value of the categories relations in an address entity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"address_order"})," is the order value of the addresses relations in a category entity."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"one-to-one-kitchensinks---tags",children:"One to one (Kitchensinks <-> Tags)"}),"\n",(0,i.jsx)("img",{src:"/img/database/o2o-example.png",alt:"one to one relation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["there is no ",(0,i.jsx)(n.code,{children:"order"})," fields as there is only one relation per pair."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"one-way-relation-restaurants---categories",children:"One way relation (Restaurants <-> Categories)"}),"\n",(0,i.jsx)(n.p,{children:"Where a restaurant has many categories:"}),"\n",(0,i.jsx)("img",{src:"/img/database/mw-example.png",alt:"many way relation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"category_order"})," is the order value of the categories relations in a restaurant entity."]}),"\n",(0,i.jsxs)(n.li,{children:["There is no ",(0,i.jsx)(n.code,{children:"restaurant_order"})," as it is a one way relation."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-reorder-relations-in-the-db-layer",children:"How to reorder relations in the DB layer"}),"\n",(0,i.jsxs)(n.p,{children:["See more on ",(0,i.jsx)(n.a,{href:"https://docs.strapi.io/dev-docs/api/rest/relations#connect",children:"Strapi Docs"})]}),"\n",(0,i.jsx)(n.p,{children:"The database layer should receive a payload shown below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"  category: {\n    connect: [\n      { id: 6, position: { after: 1} },    // It should be after relation id=1\n      { id: 8, position: { end: true }},   // It should be at the end\n    ],\n    disconnect: [\n      { id: 4 }\n    ]\n  }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-does-relations-reordering-work",children:"How does relations reordering work?"}),"\n",(0,i.jsx)(n.p,{children:"We use fractional indexing. This means that we use decimal numbers to order the relations. See the following diagrams below for a more detailed understanding."}),"\n",(0,i.jsx)(n.h3,{id:"simple-example",children:"Simple example"}),"\n",(0,i.jsx)("img",{src:"/img/database/reordering-algo-1.png",alt:"An example of reordering in the CM"}),"\n",(0,i.jsx)(n.h3,{id:"complex-example",children:"Complex example"}),"\n",(0,i.jsx)("img",{src:"/img/database/reordering-algo-2.png",alt:"An example of reordering in the CM"}),"\n",(0,i.jsx)(n.h3,{id:"algorithm-steps",children:"Algorithm steps"}),"\n",(0,i.jsxs)(n.p,{children:["From the ",(0,i.jsx)(n.code,{children:"connect"})," array:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For every element, ",(0,i.jsx)(n.strong,{children:"load relations by id"}),", ",(0,i.jsxs)(n.strong,{children:["from fields ",(0,i.jsx)(n.code,{children:"after"})," or ",(0,i.jsx)(n.code,{children:"before"})]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Start computing based on the ",(0,i.jsx)(n.code,{children:"after"})," and ",(0,i.jsx)(n.code,{children:"before"})," relations:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialize"})," with after/before relations (",(0,i.jsx)(n.strong,{children:"step 1"}),"). Let's call these ones ",(0,i.jsx)(n.strong,{children:"init relations."})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Apply the updates"})," from the ",(0,i.jsx)(n.code,{children:"connect"})," array, ",(0,i.jsx)(n.strong,{children:"sequentially"}),".","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the update is of type ",(0,i.jsx)(n.code,{children:"before"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Place the element with the given ",(0,i.jsx)(n.code,{children:"id"})," ",(0,i.jsx)(n.strong,{children:"before"})," the specified element in the list."]}),"\n",(0,i.jsxs)(n.li,{children:["If the specified element is an ",(0,i.jsx)(n.code,{children:"init relation"}),", place the element in between that relation and the one before it.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To determine the order value, ",(0,i.jsx)(n.strong,{children:"order = beforeRelation.order - 0.5"}),". This ensures the element is placed before the ",(0,i.jsx)(n.code,{children:"before"})," relation and after the one before it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Else ",(0,i.jsx)(n.strong,{children:"order = beforeRelation.order"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If the update is of type ",(0,i.jsx)(n.code,{children:"after"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Place the element with the given ",(0,i.jsx)(n.code,{children:"id"})," ",(0,i.jsx)(n.strong,{children:"after"})," the specified element in the list."]}),"\n",(0,i.jsxs)(n.li,{children:["If the specified element is an ",(0,i.jsx)(n.code,{children:"init relation"}),", place the element in between that relation and the one after it.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To determine the order value, ",(0,i.jsx)(n.strong,{children:"order = beforeRelation.order + 0.5"}),". This ensures the element is placed before the ",(0,i.jsx)(n.code,{children:"after"})," relation and before the one after it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Else ",(0,i.jsx)(n.strong,{children:"order = beforeRelation.order"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If the update is of type ",(0,i.jsx)(n.code,{children:"end"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Place at the ",(0,i.jsx)(n.strong,{children:"end"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If placing after an init relation: ",(0,i.jsx)(n.strong,{children:"order = lastRelation.order + 0.5"})]}),"\n",(0,i.jsxs)(n.li,{children:["Else ",(0,i.jsx)(n.strong,{children:"order = lastRelation.order"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If the update is of type ",(0,i.jsx)(n.code,{children:"start"}),":\n-Place at the ",(0,i.jsx)(n.strong,{children:"start"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"order = 0.5"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"before/after"}),": If the ",(0,i.jsx)(n.strong,{children:"id does not exist in the current array"}),", ",(0,i.jsx)(n.strong,{children:"throw an error"})]}),"\n",(0,i.jsxs)(n.li,{children:["If an ",(0,i.jsx)(n.strong,{children:"id"})," was ",(0,i.jsx)(n.strong,{children:"already in this array, remove the previous one"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouping by the order value"}),", and ignoring init relations","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Recalculate order values for each group, so there are no repeated numbers & they keep the same order.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example : ",(0,i.jsx)(n.code,{children:"[ {id: 5 , order: 1.5}, {id: 3, order: 1.5 } ]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[ {id: 5 , order: 1.33}, {id: 3, order: 1.66 } ]"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Insert values in the database"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update database order based on their order position."})," (using ROW_NUMBER() clause)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"From the disconnect array:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Delete the relations from the database."}),"\n",(0,i.jsx)(n.li,{children:"Reorder the remaining elements in the database based on their position, using ROW_NUMBER() clause."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);