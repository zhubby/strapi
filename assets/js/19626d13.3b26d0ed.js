"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9539],{2735:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=o(4848),t=o(8453);const r={title:"Overview",tags:["CLI","commands"]},c=void 0,a={id:"docs/core/strapi/commands/overview",title:"Overview",description:"The CLI is largely contained to the @strapi/strapi package, however some packages are able to inject their own commands:",source:"@site/docs/docs/01-core/strapi/commands/00-overview.md",sourceDirName:"docs/01-core/strapi/commands",slug:"/docs/core/strapi/commands/overview",permalink:"/docs/core/strapi/commands/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/strapi/commands/00-overview.md",tags:[{label:"CLI",permalink:"/tags/cli"},{label:"commands",permalink:"/tags/commands"}],version:"current",sidebarPosition:0,frontMatter:{title:"Overview",tags:["CLI","commands"]},sidebar:"docs",previous:{title:"usePersistentState",permalink:"/docs/core/helper-plugin/hooks/use-persistent-state"},next:{title:"Build",permalink:"/docs/core/strapi/commands/build"}},i={},d=[{value:"Structure of command",id:"structure-of-command",level:2},{value:"<code>logger</code>",id:"logger",level:3},{value:"<code>tsconfig</code>",id:"tsconfig",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The CLI is largely contained to the ",(0,s.jsx)(n.code,{children:"@strapi/strapi"})," package, however some packages are able to inject their own commands:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/core/admin/intro",children:(0,s.jsx)(n.code,{children:"@strapi/admin"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/core/data-transfer/intro",children:(0,s.jsx)(n.code,{children:"@strapi/data-transfer"})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"structure-of-command",children:"Structure of command"}),"\n",(0,s.jsxs)(n.p,{children:["The CLI is built with ",(0,s.jsx)(n.code,{children:"commander"})," and as such every command we create can be described as:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { Command } from 'commander';\n\ntype StrapiCommand = (params: { command: Command; argv: string[]; ctx: CLIContext }) => void;\n\n// usage\n\nconst myCommand: StrapiCommand = ({ command, argv, ctx }) => {\n  // do something\n  command\n    .command('develop')\n    .alias('dev')\n    .option(\n      '--no-build',\n      '[deprecated]: there is middleware for the server, it is no longer a separate process'\n    )\n    .action((options) => {\n      // do something with options & ctx\n    });\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["These actions are then combined together in the ",(0,s.jsx)(n.code,{children:"@strapi/strapi"})," package to be used as a complete CLI, the context provided to each command\nsupplies a number of useful properties:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface CLIContext {\n  cwd: string;\n  logger: Logger;\n  tsconfig?: TsConfig;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"logger",children:(0,s.jsx)(n.code,{children:"logger"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface Logger {\n  warnings: number;\n  errors: number;\n  debug: (...args: unknown[]) => void;\n  info: (...args: unknown[]) => void;\n  warn: (...args: unknown[]) => void;\n  error: (...args: unknown[]) => void;\n  log: (...args: unknown[]) => void;\n  spinner: (text: string) => Pick<ora.Ora, 'succeed' | 'fail' | 'start' | 'text'>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The shared logger means that any command can accept ",(0,s.jsx)(n.code,{children:"--debug"})," and ",(0,s.jsx)(n.code,{children:"--silent"})," flags to control the output of the CLI. Due to incorperating ",(0,s.jsx)(n.code,{children:"ora"})," into the logger, we can also provide a spinner for long running tasks but more importantly, easily silence them when ",(0,s.jsx)(n.code,{children:"--silent"})," is passed."]}),"\n",(0,s.jsx)(n.h3,{id:"tsconfig",children:(0,s.jsx)(n.code,{children:"tsconfig"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"tsconfig"})," is not ",(0,s.jsx)(n.em,{children:"defined"})," we can conclude that the project is not a TS project. However, if it is we have access to where the tsconfig is located as well as the parsed config itself."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface TsConfig {\n  config: ts.ParsedCommandLine;\n  path: string;\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>a});var s=o(6540);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);