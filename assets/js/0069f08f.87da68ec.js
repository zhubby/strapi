"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4596],{4728:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(4848),t=n(8453);const s={title:"useClipboard",description:"API reference for the useClipboard hook in Strapi",tags:["hooks","helper-plugin"]},i=void 0,l={id:"docs/core/helper-plugin/hooks/use-clipboard",title:"useClipboard",description:"API reference for the useClipboard hook in Strapi",source:"@site/docs/docs/01-core/helper-plugin/hooks/use-clipboard.mdx",sourceDirName:"docs/01-core/helper-plugin/hooks",slug:"/docs/core/helper-plugin/hooks/use-clipboard",permalink:"/docs/core/helper-plugin/hooks/use-clipboard",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/helper-plugin/hooks/use-clipboard.mdx",tags:[{label:"hooks",permalink:"/tags/hooks"},{label:"helper-plugin",permalink:"/tags/helper-plugin"}],version:"current",frontMatter:{title:"useClipboard",description:"API reference for the useClipboard hook in Strapi",tags:["hooks","helper-plugin"]},sidebar:"docs",previous:{title:"useCallbackRef",permalink:"/docs/core/helper-plugin/hooks/use-callback-ref"},next:{title:"useCollator",permalink:"/docs/core/helper-plugin/hooks/use-collator"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Typescript",id:"typescript",level:2}];function a(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["A small abstraction around the ",(0,r.jsx)(o.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard",children:(0,r.jsx)(o.code,{children:"navigation.clipboard"})})," API.\nCurrently we only expose a ",(0,r.jsx)(o.code,{children:"copy"})," method which abstracts the ",(0,r.jsx)(o.code,{children:"writeText"})," method of the clipboard API."]}),"\n",(0,r.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"import { useClipboard } from '@strapi/helper-plugin';\n\nconst MyComponent = () => {\n  const { copy } = useClipboard();\n  const handleClick = async () => {\n    const didCopy = await copy('hello world');\n\n    if (didCopy) {\n      alert('copied!');\n    }\n  };\n\n  return <button onClick={handleClick}>Copy text</button>;\n};\n"})}),"\n",(0,r.jsx)(o.h2,{id:"typescript",children:"Typescript"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-ts",children:"function useClipboard(): {\n  copy: (text: string) => Promise<boolean>;\n};\n"})})]})}function d(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>l});var r=n(6540);const t={},s=r.createContext(t);function i(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);