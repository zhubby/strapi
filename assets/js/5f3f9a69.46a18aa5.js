"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8612],{7845:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var s=t(4848),o=t(8453);const n={title:"Source Providers",tags:["providers","data-transfer","experimental"]},a="Source Providers",i={id:"docs/core/data-transfer/providers/source-providers",title:"Source Providers",description:"Source provider structure",source:"@site/docs/docs/01-core/data-transfer/02-providers/01-source-providers.md",sourceDirName:"docs/01-core/data-transfer/02-providers",slug:"/docs/core/data-transfer/providers/source-providers",permalink:"/docs/core/data-transfer/providers/source-providers",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/data-transfer/02-providers/01-source-providers.md",tags:[{label:"providers",permalink:"/tags/providers"},{label:"data-transfer",permalink:"/tags/data-transfer"},{label:"experimental",permalink:"/tags/experimental"}],version:"current",sidebarPosition:1,frontMatter:{title:"Source Providers",tags:["providers","data-transfer","experimental"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/core/data-transfer/providers/overview"},next:{title:"Destination Providers",permalink:"/docs/core/data-transfer/providers/destination-providers"}},d={},c=[{value:"Source provider structure",id:"source-provider-structure",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"source-providers",children:"Source Providers"}),"\n",(0,s.jsx)(r.h2,{id:"source-provider-structure",children:"Source provider structure"}),"\n",(0,s.jsxs)(r.p,{children:["A source provider must implement the interface ISourceProvider found in ",(0,s.jsx)(r.code,{children:"packages/core/data-transfer/types/providers.d.ts"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["In short, it provides a set of ",(0,s.jsx)(r.code,{children:"create{_stage_}ReadStream()"})," methods for each stage that provide a Readable stream, which will retrieve its data (ideally from its own stream) and then perform a ",(0,s.jsx)(r.code,{children:"stream.write(entity)"})," for each entity, link (relation), asset (file), configuration entity, or content type schema depending on the stage."]}),"\n",(0,s.jsx)(r.p,{children:"When each stage's stream has finished sending all the data, the stream must be closed before the transfer engine will continue to the next stage."})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var s=t(6540);const o={},n=s.createContext(o);function a(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);