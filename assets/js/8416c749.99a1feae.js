"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8065],{5243:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=o(4848),t=o(8453);const i={title:"useDragAndDrop",description:"API reference for the useDragAndDrop hook in Strapi's Content Manager",tags:["content-manager","hooks","drag-and-drop"]},a=void 0,d={id:"docs/core/content-manager/hooks/use-drag-and-drop",title:"useDragAndDrop",description:"API reference for the useDragAndDrop hook in Strapi's Content Manager",source:"@site/docs/docs/01-core/content-manager/hooks/use-drag-and-drop.mdx",sourceDirName:"docs/01-core/content-manager/hooks",slug:"/docs/core/content-manager/hooks/use-drag-and-drop",permalink:"/docs/core/content-manager/hooks/use-drag-and-drop",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/content-manager/hooks/use-drag-and-drop.mdx",tags:[{label:"content-manager",permalink:"/tags/content-manager"},{label:"hooks",permalink:"/tags/hooks"},{label:"drag-and-drop",permalink:"/tags/drag-and-drop"}],version:"current",frontMatter:{title:"useDragAndDrop",description:"API reference for the useDragAndDrop hook in Strapi's Content Manager",tags:["content-manager","hooks","drag-and-drop"]},sidebar:"docs",previous:{title:"useContentTypes",permalink:"/docs/core/content-manager/hooks/use-content-types"},next:{title:"Introduction",permalink:"/docs/core/content-releases/intro"}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"Basic usage - Move items on hovering over drop zone",id:"basic-usage---move-items-on-hovering-over-drop-zone",level:3},{value:"Basic usage - Move items on dropping over drop zone",id:"basic-usage---move-items-on-dropping-over-drop-zone",level:3},{value:"Using custom previews",id:"using-custom-previews",level:3},{value:"Typescript",id:"typescript",level:2},{value:"Accessibility",id:"accessibility",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Firefox quirks",id:"firefox-quirks",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["An abstraction around ",(0,r.jsx)(n.code,{children:"react-dnd"}),"'s ",(0,r.jsx)(n.code,{children:"useDrag"})," and ",(0,r.jsx)(n.code,{children:"useDrop"})," hooks. It provides a simple API to handle drag and drop\nevents maintaining the same behaviour across the application e.g."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"When we consider the item to be above a new drop zone and move it immediately."}),"\n",(0,r.jsx)(n.li,{children:"Item is above the drop zone, we move it when user drops it."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This hook also wraps an internal hook ",(0,r.jsx)(n.code,{children:"useKeyboardDragAndDrop"})," which implements keyboard accessibile drag and drop by\nreturning an onKeyDown handler to be passed to the component's drag icon button."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The following examples assume that you have already set up the ",(0,r.jsx)(n.code,{children:"DndProvider"})," with ",(0,r.jsx)(n.code,{children:"HTML5Backend"})," in your application and\nthat you are somewhat familiar with ",(0,r.jsx)(n.code,{children:"@strapi/design-system"})," components."]})}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage---move-items-on-hovering-over-drop-zone",children:"Basic usage - Move items on hovering over drop zone"}),"\n",(0,r.jsx)(n.p,{children:"Below is a basic example usage where we move items immediately and we're not interested in rendering custom previews in the DragLayer.\nHowever, we do replace the current item with a placeholder."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Box, Flex, IconButton } from '@strapi/design-system';\nimport { Drag } from '@strapi/icons';\n\nimport { useDragAndDrop } from 'path/to/hooks';\nimport { composeRefs } from 'path/to/utils';\n\nimport { Placeholder } from './Placeholder';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const [{ handlerId, isDragging, handleKeyDown }, myRef, dropRef, dragRef] = useDragAndDrop(true, {\n    type: 'my-type',\n    index,\n    onMoveItem,\n  });\n\n  const composedRefs = composeRefs(myRef, dragRef);\n\n  return (\n    <Box ref={dropRef} cursor={'all-scroll'}>\n      {isDragging ? (\n        <Placeholder />\n      ) : (\n        <Flex ref={composedRefs} data-handler-id={handlerId}>\n          <IconButton\n            forwardedAs=\"div\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Drag\"\n            noBorder\n            onKeyDown={handleKeyDown}\n          >\n            <Drag />\n          </IconButton>\n          {'My item'}\n        </Flex>\n      )}\n    </Box>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage---move-items-on-dropping-over-drop-zone",children:"Basic usage - Move items on dropping over drop zone"}),"\n",(0,r.jsx)(n.p,{children:"Below is a basic example usage where we move items immediately without custom previews in the DragLayer. We do not replace\nthe current item until its dropped and show a drop placeholder instead next to drop target using drag direction."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Box, Flex, IconButton } from '@strapi/design-system';\nimport { Drag } from '@strapi/icons';\n\nimport { useDragAndDrop } from 'path/to/hooks';\nimport { composeRefs } from 'path/to/utils';\n\nimport { Placeholder } from './Placeholder';\n\nconst MyComponent = ({ onDropItem }) => {\n  const [{ handlerId, handleKeyDown, isOverDropTarget, direction }, myRef, dropRef, dragRef] =\n    useDragAndDrop(true, {\n      type: 'my-type',\n      index,\n      onDropItem,\n    });\n\n  const composedRefs = composeRefs(myRef, dragRef);\n\n  return (\n    <Box ref={dropRef} cursor={'all-scroll'}>\n      {isOverDropTarget && <Placeholder direction={direction} />}\n      <Flex ref={composedRefs} data-handler-id={handlerId}>\n        <IconButton\n          forwardedAs=\"div\"\n          role=\"button\"\n          tabIndex={0}\n          aria-label=\"Drag\"\n          noBorder\n          onKeyDown={handleKeyDown}\n        >\n          <Drag />\n        </IconButton>\n        {'My item'}\n      </Flex>\n    </Box>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-custom-previews",children:"Using custom previews"}),"\n",(0,r.jsxs)(n.p,{children:["The only really difference between the previous example and this one is that\nwe're using the ",(0,r.jsx)(n.code,{children:"getEmptyImage"})," function from ",(0,r.jsx)(n.code,{children:"react-dnd-html5-backend"})," to render custom previews in the DragLayer."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { getEmptyImage } from 'react-dnd-html5-backend';\nimport { Box, Flex, IconButton } from '@strapi/design-system';\nimport { Drag } from '@strapi/icons';\n\nimport { useDragAndDrop } from 'path/to/hooks';\nimport { composeRefs } from 'path/to/utils';\n\nimport { Placeholder } from './Placeholder';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const [{ handlerId, isDragging, handleKeyDown }, myRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(true, {\n      type: 'my-type',\n      index,\n      onMoveItem,\n    });\n\n  // highlight-start\n  useEffect(() => {\n    dragPreviewRef(getEmptyImage());\n  }, [dragPreviewRef]);\n  // highlight-end\n\n  const composedRefs = composeRefs(myRef, dragRef);\n\n  return (\n    <Box ref={dropRef} cursor={'all-scroll'}>\n      {isDragging ? (\n        <Placeholder />\n      ) : (\n        <Flex ref={composedRefs} data-handler-id={handlerId}>\n          <IconButton\n            forwardedAs=\"div\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Drag\"\n            noBorder\n            onKeyDown={handleKeyDown}\n          >\n            <Drag />\n          </IconButton>\n          {'My item'}\n        </Flex>\n      )}\n    </Box>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"typescript",children:"Typescript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Identifier } from 'dnd-core';\nimport { ConnectDropTarget, ConnectDragSource, ConnectDragPreview } from 'react-dnd';\n\ninterface UseDragAndDropOptions {\n  index: number | Array<number>;\n  onMoveItem?: (newIndex: number | Array<number>, currentIndex: number | Array<number>) => void;\n  /**\n   * @default \"regular\"\n   * Defines whether the change in index should be immediately over another\n   * dropzone or half way over it (regular).\n   */\n  dropSensitivity?: 'immediate' | 'regular';\n  item?: object;\n  /**\n   * @default 'STRAPI_DND'\n   */\n  type?: string;\n  onCancel?: (index: number) => void;\n  onDropItem?: (currentIndex: number | Array<number>, newIndex: number | Array<number>) => void;\n  onEnd?: () => void;\n  onGrabItem?: (index: number) => void;\n  onStart?: () => void;\n}\n\ntype UseDragAndDropReturn = [\n  props: {\n    handlerId: Identifier;\n    isDragging: boolean;\n    handleKeyDown: (event: KeyboardEvent<HTMLButtonElement>) => void;\n    isOverDropTarget: boolean;\n    direction: string;\n  },\n  objectRef: React.RefObject<HTMLElement>,\n  dropRef: ConnectDropTarget,\n  dragRef: ConnectDragSource,\n  dragPreviewRef: ConnectDragPreview\n];\n\ntype UseDragAndDrop = (active: boolean, options: UseDragAndDropOptions) => UseDragAndDropReturn;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,r.jsxs)(n.p,{children:["Its advised to implement a ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions",children:"live text region"})," in the\nparent component holding your individual dnd children. This should be done to inform the user of the current state of the drag and drop.\nTo implement this, you need to pass the ",(0,r.jsx)(n.code,{children:"onDropItem"}),", ",(0,r.jsx)(n.code,{children:"onGrabItem"})," and ",(0,r.jsx)(n.code,{children:"onCancel"})," callbacks to the ",(0,r.jsx)(n.code,{children:"useDragAndDrop"})," hook which are fired\nonly with the purpose of updating the live region, hence why they're optional. You would also update the live region as part of your\n",(0,r.jsx)(n.code,{children:"onMoveItem"})," callback. There are generic messages that can be used in the ",(0,r.jsx)(n.code,{children:"intl"})," provider, an example of using this may look like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"setLiveText(\n  formatMessage(\n    {\n      id: getTrad('dnd.drop-item'),\n      defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n    },\n    {\n      item: 'my item',\n      position: 1,\n    }\n  )\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://react-dnd.github.io/react-dnd/docs/overview",children:"react-dnd docs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://react-dnd.github.io/react-dnd/docs/api/use-drag",children:"useDrag API"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://react-dnd.github.io/react-dnd/docs/api/use-drop",children:"useDrop API"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://react-dnd.github.io/react-dnd/docs/api/use-drag-layer",children:"useDragLayer API"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"firefox-quirks",children:"Firefox quirks"}),"\n",(0,r.jsxs)(n.p,{children:["You might notice in the ",(0,r.jsx)(n.a,{href:"#basic-usage",children:"basic usage"})," section this piece of code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<IconButton\n  forwardedAs="div"\n  role="button"\n  tabIndex={0}\n  aria-label="Drag"\n  noBorder\n  onKeyDown={handleKeyDown}\n>\n  <Drag />\n</IconButton>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"firefox"})," the drag handler will not work if you click and drag when the element is a ",(0,r.jsx)(n.code,{children:"button"}),", this is known ",(0,r.jsx)(n.a,{href:"https://bugzilla.mozilla.org/show_bug.cgi?id=568313",children:"bug in the browser"}),".\nTherefore the workaround is to use the ",(0,r.jsx)(n.code,{children:"forwardedAs"})," prop to render a ",(0,r.jsx)(n.code,{children:"div"})," instead of a ",(0,r.jsx)(n.code,{children:"button"}),"\nand add the ",(0,r.jsx)(n.code,{children:"role"})," and ",(0,r.jsx)(n.code,{children:"tabIndex"})," props to make this accessible. The actual ",(0,r.jsx)(n.code,{children:"IconButton"})," component\nadds an accessible lable from the ",(0,r.jsx)(n.code,{children:"aria-label"})," prop. So we don't have to concern ourselves with that."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>d});var r=o(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);