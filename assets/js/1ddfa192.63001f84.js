"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2341],{3298:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=t(4848),i=t(8453);const o={title:"useFocusInputField",description:"API reference for the useFocusInputField hook in Strapi",tags:["hooks","helper-plugin","visual editing"]},r=void 0,c={id:"docs/core/helper-plugin/hooks/use-focus-input-field",title:"useFocusInputField",description:"API reference for the useFocusInputField hook in Strapi",source:"@site/docs/docs/01-core/helper-plugin/hooks/use-focus-input-field.mdx",sourceDirName:"docs/01-core/helper-plugin/hooks",slug:"/docs/core/helper-plugin/hooks/use-focus-input-field",permalink:"/docs/core/helper-plugin/hooks/use-focus-input-field",draft:!1,unlisted:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/helper-plugin/hooks/use-focus-input-field.mdx",tags:[{label:"hooks",permalink:"/tags/hooks"},{label:"helper-plugin",permalink:"/tags/helper-plugin"},{label:"visual editing",permalink:"/tags/visual-editing"}],version:"current",frontMatter:{title:"useFocusInputField",description:"API reference for the useFocusInputField hook in Strapi",tags:["hooks","helper-plugin","visual editing"]},sidebar:"docs",previous:{title:"useFilter",permalink:"/docs/core/helper-plugin/hooks/use-filter"},next:{title:"usePersistentState",permalink:"/docs/core/helper-plugin/hooks/use-persistent-state"}},l={},d=[{value:"Usage",id:"usage",level:2},{value:"Typescript",id:"typescript",level:2},{value:"Notes",id:"notes",level:2}];function p(e){const s={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Used to focus any input and scrolls into the center of the viewport when it's provided name matches the ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",children:(0,n.jsx)(s.code,{children:"URLSearchParams"})}),"\nkey ",(0,n.jsx)(s.code,{children:"field"}),". Internally wraps the ",(0,n.jsx)(s.code,{children:"useQuery"})," hook and checks against the provided name with the defined key."]}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:"import { useFocusInputField } from '@strapi/helper-plugin';\n\nconst MyComponent = (props) => {\n  const fieldRef = useFocusInputField(props.name)\n\n  return (\n    <input ref={fieldRef} {...props}>\n  );\n};\n"})}),"\n",(0,n.jsx)(s.h2,{id:"typescript",children:"Typescript"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"function useFocusInputField(fieldName: string): (node: HTMLElement) => void;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"notes",children:"Notes"}),"\n",(0,n.jsxs)(s.p,{children:["Due to the current public ",(0,n.jsx)(s.code,{children:"forwardRef"})," API of ",(0,n.jsx)(s.a,{href:"https://design-system-git-main-strapijs.vercel.app/?path=/docs/design-system-components-textinput--base",children:(0,n.jsx)(s.code,{children:"TextInput"})}),"\nin the design-system, this hook ",(0,n.jsx)(s.em,{children:"will"})," check if there is an ",(0,n.jsx)(s.code,{children:"input"})," key on the attached ref. If so, it will access that object as if it is a ref itself i.e. ",(0,n.jsx)(s.code,{children:"field.input.current"}),"\nand use that object to both focus and scroll into view."]})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var n=t(6540);const i={},o=n.createContext(i);function r(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);